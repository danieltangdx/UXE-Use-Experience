#
# Backend compiler script for ixcom 
#
# Source custom compile script from user if specified
set compileQel "xc_work/qel/compile.qel"
if { [file exists $compileQel] } {
    source $compileQel
    exit
} else {
    if {[file exists compile.qel]} {
	source compile.qel
	exit
    }
}
source [file join $env(QTHOME) etc qel ixcom_util.qel]
set skipImportScript "xc_work/qel/skipImport.qel"
# Skip import if skipImportScript exists
if { [file exists $skipImportScript] != 1} {
    set importScript "xc_work/qel/import.qel"
    if { [file exists $importScript] } {
        source $importScript
    } else {
	if {[file exists xc_work/nl/refLib.qel]} {
	    # External netlist compile, source reference library list
	    source xc_work/nl/refLib.qel
	} else {
	    if {[file exists refLib.qel]} {
		source refLib.qel
	    } else {
		refLib qtref generic
	    }
	}
	
	# design -rm
	importOption {mode full}
	importOption {special DELETE_LIBS_ON_FULL}
	importOption {library hdldb}
	importOption {V1995 ON}
	if {[file exists xc_work/nl/import.qel]} {
	    # External netlist compile, source IXCOM created import script
	    source xc_work/nl/import.qel
	} else {
	    importOption {IXCOM_RTL ON}
	    netlistFile {verilog xc_work/xc_va.ver}
	    set externalNetlistsQel "xc_work/qel/externalNetlists.qel"
	    if {[file exists $externalNetlistsQel]} {
		source $externalNetlistsQel
	    } else {
		if {[file exists externalNetlists.qel]} {
		    source externalNetlists.qel
		}
	    }
	}

        set gfifoSynthBypassQel "xc_work/qel/gfifo_synth_bypass.qel"
        if { [file exists $gfifoSynthBypassQel] } {
            # Compile gfifo related logic that has been bypassed around hdlice.
            source $gfifoSynthBypassQel
        }

        set scgGfifoSynthBypassQel "xc_work/qel/scg_gfifo_synth_bypass.qel"
        if { [file exists $scgGfifoSynthBypassQel] } {
            # Compile scg-gfifo related logic that has been bypassed around hdlice.
            source $scgGfifoSynthBypassQel
        }

        set sfifoSynthBypassQel "xc_work/qel/sfifo_synth_bypass.qel"
        if { [file exists $sfifoSynthBypassQel] } {
            # Compile sfifo related logic that has been bypassed around hdlice.
            source $sfifoSynthBypassQel
        }

        set ifSynSynthBypassQel "xc_work/qel/ifsyn_synth_bypass.qel"
        if { [file exists $ifSynSynthBypassQel] } {
            # Compile ifsyn related logic that has been bypassed around hdlice.
            source $ifSynSynthBypassQel
        }

	designImport

	set postImportScript "xc_work/qel/postImport.qel"
	if { [file exists $postImportScript] } {
	    source $postImportScript
	}
    }
}
set importOnly "xc_work/qel/importOnly.qel"
   if { [file exists $importOnly] == 1 } {
        exit
}
design hdldb xcva_top
memoryTransform -add {* SHALLOW off }
compilerOption -add {mode ice}
precompileOption -add {keepEmptyCells}
precompileOption -add {breakECMloops}
precompileOption -add dontMergeCommon
probeInternalNet -add xc_top.sdlEnable xc_top.tbcEnable xc_top.sdlHaltHwClk xc_top.hwClkDbg xc_top.hwClkDbgTime xc_top.hwClkEnable
set compileScript "compile -names_crit"
set postCompileScript ""
handleBackendArgs $argc $argv
set defaultConfg [ file join $env(QTHOME) etc et3 ua_default.et3confg ]
emulatorConfiguration -add "file $defaultConfg" "boards 0.1"
if {[file exists xc_work/nl/hot-swap.qel]} {
    source xc_work/nl/hot-swap.qel
}
# Source compiler options script from user if specified
set compilerOptionsQel "xc_work/qel/compilerOptions.qel"
if { [file exists $compilerOptionsQel] } {
    source $compilerOptionsQel
} else {
    if {[file exists compilerOptions.qel]} {
	source compilerOptions.qel
    }
}
if {[info exists env(XE_DYNP)]} {
    compilerOption -add {visionMode DYNP}
} elseif {[info exists env(UXE_DYNP)]} {
    compilerOption -add {visionMode DYNP}
}
if {[info exists env(XE_MINSTEP)]} {
  eval "compilerOption -add {minStep $env(XE_MINSTEP)}"
} elseif  {[info exists env(UXE_MINSTEP)]} {
  eval "compilerOption -add {minStep $env(UXE_MINSTEP)}"
}
checkEnvForHostSetup
